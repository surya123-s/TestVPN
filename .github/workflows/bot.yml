name: Windows 10 RDP with Bot

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-2022
    timeout-minutes: 4320   # 72 hours

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create Permanent RDP User
        run: |
          $username = "cyberpunk"
          $password = "Surya@12345RDP"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
              Remove-LocalUser -Name $username
          }
          New-LocalUser -Name $username -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          echo "RDP_CREDS=User: $username | Password: $password" >> $env:GITHUB_ENV

      - name: Install Tailscale (Latest)
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          $authKey = "${{ secrets.TAILSCALE_PREAUTHKEY }}"
          $hostname = "gh-runner-$env:GITHUB_RUN_ID"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$authKey --hostname=$hostname
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Run Custom Apps Installer (script By Surya....!!! )
        run: |
          Write-Host "Downloading and running Windows-apps-by-surya.ps1..."
          $scriptUrl = "https://raw.githubusercontent.com/surya123-s/TestVPN/refs/heads/main/Windows-apps-by-surya.ps1"
          $localPath = "$env:TEMP\Windows-apps-by-surya.ps1"
          Invoke-WebRequest -Uri $scriptUrl -OutFile $localPath -UseBasicParsing
          powershell -ExecutionPolicy Bypass -File $localPath

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      # ---------- Ensure correct Python (use action to guarantee interpreter) ----------
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies & yt-dlp (latest)
        run: |
          python -V
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -U yt-dlp pyrogram tgcrypto ffmpeg-python
          # Optionally fetch bleeding-edge yt-dlp from repo if you want: uncomment below
          # python -m pip install -U git+https://github.com/yt-dlp/yt-dlp

      # Install ffmpeg via Chocolatey (for ffmpeg/ffprobe CLI)
      - name: Install ffmpeg (choco)
        run: |
          choco install -y ffmpeg
          refreshenv

      # --- Fetch Your Bot Source (your repo) ---
      - name: Checkout Bot Repo
        uses: actions/checkout@v4
        with:
          repository: surya123-s/TestVPN   # <- replace with your repo (owner/repo)
          path: bot

      # --- Start the Bot ---
      - name: Start Telegram Leech Bot
        working-directory: bot
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          TG_CHAT: ${{ secrets.TG_CHAT }}
          ALLOWED_USERS: ${{ secrets.ALLOWED_USERS }}
          TAILSCALE_PREAUTHKEY: ${{ secrets.TAILSCALE_PREAUTHKEY }}
        run: |
          Write-Host "Launching Telegram Bot..."
          python main.py

      # --- Keep Workflow Alive (Bot stays running) ---
      - name: Maintain Bot Session
        run: |
          while ($true) {
              Write-Host "[$(Get-Date)] Bot Active - Running..."
              Start-Sleep -Seconds 300
          }
