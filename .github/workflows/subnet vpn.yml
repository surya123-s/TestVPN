name: Tailscale with Subnet
on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 */10 * * *"

jobs:
  run-tailscale:
    runs-on: ubuntu-latest

    steps:
      - name: Install Tailscale + jq
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq iproute2
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Enable IP Forwarding
        run: |
          sudo sysctl -w net.ipv4.ip_forward=1
          sudo sysctl -w net.ipv6.conf.all.forwarding=1

      - name: Get Runner Hostname (Unique for Tailscale)
        id: runner_info
        run: |
          BASE_HOSTNAME=$(hostname)
          UNIQUE_HOSTNAME="${BASE_HOSTNAME}-${GITHUB_RUN_ID}"
          echo "runner_hostname=$UNIQUE_HOSTNAME" >> $GITHUB_ENV
          echo "runner_hostname=$UNIQUE_HOSTNAME" >> $GITHUB_OUTPUT

      - name: Detect Local Subnet
        id: subnet
        run: |
          SUBNET=$(ip -o -f inet addr show | awk '/scope global/ {print $4; exit}')
          echo "subnet=$SUBNET" >> $GITHUB_OUTPUT
          echo "Detected Subnet: $SUBNET"

      - name: Start Tailscale Exit Node + Subnet Router
        run: |
          sudo tailscale up \
            --authkey ${{ secrets.TAILSCALE_PREAUTHKEY }} \
            --ssh \
            --advertise-exit-node \
            --advertise-routes=${{ steps.subnet.outputs.subnet }} \
            --hostname ${{ steps.runner_info.outputs.runner_hostname }} \
            --reset
        env:
          TS_SOCKET: /tmp/tailscaled.sock

      - name: Save Start Time
        run: |
          START_TIME=$(date +%s)
          echo "START_TIME=$START_TIME" >> $GITHUB_ENV

      - name: Get Tailscale & Public IP
        id: get_ips
        run: |
          TAILSCALE_IP=$(sudo tailscale ip -4)
          PUBLIC_IP=$(curl -s ifconfig.me)
          LOCATION_JSON=$(curl -s http://ip-api.com/json/$PUBLIC_IP)

          CITY=$(echo $LOCATION_JSON | jq -r '.city // "Unknown City"')
          COUNTRY=$(echo $LOCATION_JSON | jq -r '.country // "Unknown Country"')
          CC=$(echo $LOCATION_JSON | jq -r '.countryCode // ""')
          ISP=$(echo $LOCATION_JSON | jq -r '.isp // "Unknown ISP"')

          # ‚úÖ Proper UTF-8 flags
          FLAG=""
          for (( i=0; i<${#CC}; i++ )); do
            c=${CC:i:1}
            code=$(( $(printf '%d' "'$c") - 65 + 0x1F1E6 ))
            FLAG+=$(printf "\\U%08X" $code)
          done
          FLAG=$(echo -e $FLAG)

          echo "TAILSCALE_IP=$TAILSCALE_IP" >> $GITHUB_ENV
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "CITY=$CITY" >> $GITHUB_ENV
          echo "COUNTRY=$COUNTRY" >> $GITHUB_ENV
          echo "FLAG=$FLAG" >> $GITHUB_ENV
          echo "ISP=$ISP" >> $GITHUB_ENV
          echo "ts_ip=$TAILSCALE_IP" >> $GITHUB_OUTPUT
          echo "pub_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Send Telegram Notification
        run: |
          MSG="üöÄ Tailscale Node Online
üñ•Ô∏è Runner: ${{ steps.runner_info.outputs.runner_hostname }}
üåê Tailscale IP: ${{ steps.get_ips.outputs.ts_ip }}
üåç Public IP: ${{ steps.get_ips.outputs.pub_ip }}
üìç Location: ${{ env.CITY }}, ${{ env.COUNTRY }} ${{ env.FLAG }}
üè¢ ISP: ${{ env.ISP }}
üõú Advertised Subnet: ${{ steps.subnet.outputs.subnet }}
‚è±Ô∏è Running since: $(date '+%H:%M:%S %d-%m-%Y')"

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$MSG"
