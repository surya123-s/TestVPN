name: Tailscale VPN with SSH login

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"   # Runs every 6 hours

jobs:
  run-tailscale:
    runs-on: ubuntu-latest

    steps:
      - name: Install Tailscale + OpenSSH
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-server
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Enable IP Forwarding
        run: |
          sudo sysctl -w net.ipv4.ip_forward=1
          sudo sysctl -w net.ipv6.conf.all.forwarding=1

      - name: Create SSH User & Keys
        id: ssh_setup
        run: |
          USER=cyberuser
          PASS=$(openssl rand -base64 12)

          # Create user with home directory
          sudo useradd -m -s /bin/bash $USER
          echo "$USER:$PASS" | sudo chpasswd

          # Setup SSH directory with proper permissions
          sudo mkdir -p /home/$USER/.ssh
          sudo chown $USER:$USER /home/$USER/.ssh
          sudo chmod 700 /home/$USER/.ssh

          # Generate SSH keypair
          ssh-keygen -t ed25519 -f id_ed25519 -N "" <<< y >/dev/null 2>&1
          PUB_KEY=$(cat id_ed25519.pub)
          PRIV_KEY=$(cat id_ed25519)

          echo "$PUB_KEY" | sudo tee -a /home/$USER/.ssh/authorized_keys
          sudo chown $USER:$USER /home/$USER/.ssh/authorized_keys
          sudo chmod 600 /home/$USER/.ssh/authorized_keys

          # Export vars for later steps
          echo "username=$USER" >> $GITHUB_ENV
          echo "password=$PASS" >> $GITHUB_ENV
          echo "privkey<<EOF" >> $GITHUB_ENV
          echo "$PRIV_KEY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Start Tailscale Exit Node
        run: |
          sudo tailscale up \
            --authkey ${{ secrets.TAILSCALE_AUTHKEY }} \
            --ssh \
            --advertise-exit-node
        env:
          TS_SOCKET: /tmp/tailscaled.sock

      - name: Get Tailscale & Public IP
        id: get_ips
        run: |
          TAILSCALE_IP=$(sudo tailscale ip -4)
          PUBLIC_IP=$(curl -s ifconfig.me)
          echo "TAILSCALE_IP=$TAILSCALE_IP" >> $GITHUB_ENV
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "ts_ip=$TAILSCALE_IP" >> $GITHUB_OUTPUT
          echo "pub_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
        env:
          TS_SOCKET: /tmp/tailscaled.sock

      - name: Send Telegram Start Notification
        run: |
          MSG="üöÄ Tailscale VPN with SSH login Node Online%0Aüåê Tailscale IP: ${{ steps.get_ips.outputs.ts_ip }}%0Aüåç Public IP: ${{ steps.get_ips.outputs.pub_ip }}%0Aüë§ SSH User: ${{ env.username }}%0Aüîë SSH Password: ${{ env.password }}%0Aüë§ SSH ==> ssh ${{ env.username }}@${{ steps.get_ips.outputs.ts_ip }}%0AüóùÔ∏è Tailscale SSH Key:%0A${{ env.privkey }}%0A‚è±Ô∏è Active for 6 hours"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TG_CHAT_ID }} \
            -d text="$MSG"

      - name: Keep Runner Alive
        run: |
          echo "Runner active for 6 hours. It will auto-restart again on schedule."
          sleep 21600 # 6 hours

      - name: Cleanup Exit Node
        if: always()
        run: |
          echo "üõë Cleaning up Tailscale exit node..."
          sudo tailscale down

      - name: Send Telegram Stop Notification
        if: always()
        run: |
          MSG="üõë Tailscale VPN with SSH login Node is Down%0Aüåê Tailscale IP was: ${{ steps.get_ips.outputs.ts_ip }}%0Aüåç Public IP was: ${{ steps.get_ips.outputs.pub_ip }}"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TG_CHAT_ID }} \
            -d text="$MSG"
