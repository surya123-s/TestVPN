name: Windows-RDP-Test

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 4320   # 72 hours (max GitHub allows)

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Firewall rule for RDP
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create Permanent RDP User
        run: |
          $username = "rdpuser"
          $password = "Cyber@12345RDP"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
              Remove-LocalUser -Name $username
          }

          New-LocalUser -Name $username -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          
          echo "RDP_CREDS=User: $username | Password: $password" >> $env:GITHUB_ENV
          
          if (-not (Get-LocalUser -Name $username)) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection with Subnet & Exit Node
        run: |
          # Connect with pre-auth key, enable subnet and exit node if defined
          $authKey = "${{ secrets.TAILSCALE_PREAUTHKEY }}"
          $hostname = "gh-runner-$env:GITHUB_RUN_ID"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$authKey --hostname=$hostname `
              --advertise-routes=10.0.0.0/16 --accept-routes
          
          # Wait for Tailscale IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Install Brave, VLC, Telegram
        run: |
          Write-Host "Downloading and Installing Brave, VLC, and Telegram..."

          $downloads = @(
              @{name="Brave"; url="https://laptop-updates.brave.com/latest/BraveBrowserSetup.exe"; args="--silent --do-not-launch"},
              @{name="VLC"; url="https://get.videolan.org/vlc/3.0.18/win64/vlc-3.0.18-win64.exe"; args="/S"},
              @{name="Telegram"; url="https://telegram.org/dl/desktop/win/Telegram.exe"; args="/S"}
          )

          foreach ($app in $downloads) {
              $installer = "$env:TEMP\$($app.name).exe"
              Write-Host "Downloading $($app.name)..."
              Invoke-WebRequest -Uri $app.url -OutFile $installer -UseBasicParsing
              
              Write-Host "Installing $($app.name)..."
              Start-Process -FilePath $installer -ArgumentList $app.args -Wait -NoNewWindow
              
              Remove-Item $installer -Force
              Write-Host "$($app.name) installed successfully!"
          }

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: rdpuser"
          Write-Host "Password: Cyber@12345RDP"
          Write-Host "xfreerdp /v:$env:TAILSCALE_IP /u:rdpuser /p:Cyber@12345RDP /f /clipboard /sound "
          Write-Host "==================`n"
          
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
