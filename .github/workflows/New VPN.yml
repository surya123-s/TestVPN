name: Tailscale Live 

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 */6 * * *"   # Every 6 hours

jobs:
  run-tailscale:
    runs-on: ubuntu-latest

    steps:
      - name: Install Tailscale + jq
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Enable IP Forwarding
        run: |
          sudo sysctl -w net.ipv4.ip_forward=1
          sudo sysctl -w net.ipv6.conf.all.forwarding=1

      - name: Get Runner Hostname
        id: runner_info
        run: |
          RUNNER_HOSTNAME=$(hostname)
          echo "runner_hostname=$RUNNER_HOSTNAME" >> $GITHUB_ENV
          echo "runner_hostname=$RUNNER_HOSTNAME" >> $GITHUB_OUTPUT

      - name: Start Tailscale Exit Node
        run: |
          sudo tailscale up \
            --authkey ${{ secrets.TAILSCALE_PREAUTHKEY }} \
            --ssh \
            --advertise-exit-node \
            --hostname ${{ steps.runner_info.outputs.runner_hostname }} \
            --reset
        env:
          TS_SOCKET: /tmp/tailscaled.sock

      - name: Get Tailscale & Public IP
        id: get_ips
        run: |
          TAILSCALE_IP=$(sudo tailscale ip -4)
          PUBLIC_IP=$(curl -s ifconfig.me)
          LOCATION_JSON=$(curl -s https://ipapi.co/$PUBLIC_IP/json/)
          CITY=$(echo $LOCATION_JSON | jq -r '.city')
          COUNTRY=$(echo $LOCATION_JSON | jq -r '.country_name')
          ISP=$(echo $LOCATION_JSON | jq -r '.org')

          echo "TAILSCALE_IP=$TAILSCALE_IP" >> $GITHUB_ENV
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "CITY=$CITY" >> $GITHUB_ENV
          echo "COUNTRY=$COUNTRY" >> $GITHUB_ENV
          echo "ISP=$ISP" >> $GITHUB_ENV
          echo "ts_ip=$TAILSCALE_IP" >> $GITHUB_OUTPUT
          echo "pub_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Live Telegram Notification (Single Message, Updates Every 5 min)
        run: |
          START_TIME=$(date +%s)
          # Send initial message and get message_id
          MSG="üöÄ Tailscale Node Online%0Aüñ•Ô∏è Runner: ${{ steps.runner_info.outputs.runner_hostname }}%0Aüåê Tailscale IP: ${{ steps.get_ips.outputs.ts_ip }}%0Aüåç Public IP: ${{ steps.get_ips.outputs.pub_ip }}%0Aüìç Location: ${{ env.CITY }}, ${{ env.COUNTRY }}%0Aüè¢ ISP: ${{ env.ISP }}%0A‚è±Ô∏è Running since: 00:00:00%0A‚è∞ Next workflow (IST): $(date -d '+5 hour 30 min' +'%I:%M %p')"

          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TG_CHAT_ID }} \
            -d text="$MSG")
          MESSAGE_ID=$(echo $RESPONSE | jq -r '.result.message_id')

          # Update message every 5 minutes for 6 hours
          while [ $(($(date +%s) - $START_TIME)) -lt 21600 ]; do
            ELAPSED=$(($(date +%s) - $START_TIME))
            HOURS=$(printf "%02d" $((ELAPSED/3600)))
            MINUTES=$(printf "%02d" $(((ELAPSED%3600)/60)))
            SECONDS=$(printf "%02d" $((ELAPSED%60)))

            # Re-fetch public info in case of change
            PUBLIC_IP=$(curl -s ifconfig.me)
            LOCATION_JSON=$(curl -s https://ipapi.co/$PUBLIC_IP/json/)
            CITY=$(echo $LOCATION_JSON | jq -r '.city')
            COUNTRY=$(echo $LOCATION_JSON | jq -r '.country_name')
            ISP=$(echo $LOCATION_JSON | jq -r '.org')

            NEXT_RUN_UTC=$(date -u -d "+6 hour" +"%I:%M %p")
            NEXT_RUN_IST=$(date -d "$NEXT_RUN_UTC UTC +5 hour 30 min" +"%I:%M %p")

            MSG="üöÄ Tailscale Node Online%0Aüñ•Ô∏è Runner: ${{ steps.runner_info.outputs.runner_hostname }}%0Aüåê Tailscale IP: ${{ steps.get_ips.outputs.ts_ip }}%0Aüåç Public IP: $PUBLIC_IP%0Aüìç Location: $CITY, $COUNTRY%0Aüè¢ ISP: $ISP%0A‚è±Ô∏è Running since: ${HOURS}:${MINUTES}:${SECONDS}%0A‚è∞ Next workflow (IST): $NEXT_RUN_IST"

            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/editMessageText" \
              -d chat_id=${{ secrets.TG_CHAT_ID }} \
              -d message_id=$MESSAGE_ID \
              -d text="$MSG"

            sleep 300
          done

      - name: Cleanup Exit Node
        if: always()
        run: |
          echo "üõë Cleaning up Tailscale exit node..."
          sudo tailscale down

      - name: Send Telegram Stop Notification
        if: always()
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          HOURS=$(printf "%02d" $((DURATION/3600)))
          MINUTES=$(printf "%02d" $(((DURATION%3600)/60)))
          SECONDS=$(printf "%02d" $((DURATION%60)))
          MSG="üõë Tailscale Node Stopped%0Aüñ•Ô∏è Runner: ${{ steps.runner_info.outputs.runner_hostname }}%0Aüåê Tailscale IP was: ${{ steps.get_ips.outputs.ts_ip }}%0Aüåç Public IP was: ${{ steps.get_ips.outputs.pub_ip }}%0Aüìç Location was: ${{ env.CITY }}, ${{ env.COUNTRY }}%0Aüè¢ ISP: ${{ env.ISP }}%0A‚è±Ô∏è Active Duration: ${HOURS}:${MINUTES}:${SECONDS}"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TG_CHAT_ID }} \
            -d text="$MSG"
