name: NEW

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"   # Every 6 hours

jobs:
  run-tailscale:
    runs-on: ubuntu-latest

    steps:
      - name: Install Tailscale + jq + curl
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Enable IP Forwarding
        run: |
          sudo sysctl -w net.ipv4.ip_forward=1
          sudo sysctl -w net.ipv6.conf.all.forwarding=1

      - name: Get Runner Hostname
        id: runner_info
        run: |
          RUNNER_HOSTNAME=$(hostname)
          echo "runner_hostname=$RUNNER_HOSTNAME" >> $GITHUB_ENV
          echo "runner_hostname=$RUNNER_HOSTNAME" >> $GITHUB_OUTPUT

      - name: Start Tailscale Exit Node
        run: |
          sudo tailscale up \
            --authkey ${{ secrets.TAILSCALE_PREAUTHKEY }} \
            --ssh \
            --advertise-exit-node \
            --hostname ${{ steps.runner_info.outputs.runner_hostname }} \
            --reset
        env:
          TS_SOCKET: /tmp/tailscaled.sock

      - name: Get Tailscale & Public IP
        id: get_ips
        run: |
          TAILSCALE_IP=$(sudo tailscale ip -4)
          PUBLIC_IP=$(curl -s ifconfig.me)
          LOCATION_JSON=$(curl -s https://ipapi.co/$PUBLIC_IP/json/)
          CITY=$(echo $LOCATION_JSON | jq -r '.city // "Unknown"')
          COUNTRY=$(echo $LOCATION_JSON | jq -r '.country_name // "Unknown"')
          ISP=$(echo $LOCATION_JSON | jq -r '.org // "Unknown"')

          echo "TAILSCALE_IP=$TAILSCALE_IP" >> $GITHUB_ENV
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "CITY=$CITY" >> $GITHUB_ENV
          echo "COUNTRY=$COUNTRY" >> $GITHUB_ENV
          echo "ISP=$ISP" >> $GITHUB_ENV
          echo "ts_ip=$TAILSCALE_IP" >> $GITHUB_OUTPUT
          echo "pub_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Send Live Telegram Notification (Single Message)
        run: |
          START_TIME=$(date +%s)

          # Initial Message
          NEXT_RUN_HOUR=$(( (( $(date -u +%H)/6 +1)*6) % 24 ))
          NEXT_RUN=$(date -d "today $NEXT_RUN_HOUR:00 +5 hours 30 minutes" +"%I:%M %p IST")

          INIT_MSG="🚀 Tailscale Node Online
──────────────────────────────
🖥️ Runner       : ${{ steps.runner_info.outputs.runner_hostname }}
🌐 Tailscale IP  : ${{ steps.get_ips.outputs.ts_ip }}
🌍 Public IP     : ${{ steps.get_ips.outputs.pub_ip }}
📍 Location      : ${{ env.CITY }}, ${{ env.COUNTRY }}
🏢 ISP           : ${{ env.ISP }}
──────────────────────────────
⏱️ Running since : 00:00:00
⏰ Next workflow  : $NEXT_RUN
──────────────────────────────"

          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
            --data-urlencode "chat_id=${{ secrets.TG_CHAT_ID }}" \
            --data-urlencode "text=$INIT_MSG")

          MESSAGE_ID=$(echo $RESPONSE | jq -r '.result.message_id')

          # Update message every 5 minutes for 6 hours
          END_TIME=$((START_TIME + 21600))
          while [ $(date +%s) -lt $END_TIME ]; do
            ELAPSED=$(( $(date +%s) - START_TIME ))
            HOURS=$(printf "%02d" $((ELAPSED/3600)))
            MINUTES=$(printf "%02d" $(((ELAPSED%3600)/60)))
            SECONDS=$(printf "%02d" $((ELAPSED%60)))

            # Refresh IP info
            TAILSCALE_IP=$(sudo tailscale ip -4)
            PUBLIC_IP=$(curl -s ifconfig.me)
            LOCATION_JSON=$(curl -s https://ipapi.co/$PUBLIC_IP/json/)
            CITY=$(echo $LOCATION_JSON | jq -r '.city // "Unknown"')
            COUNTRY=$(echo $LOCATION_JSON | jq -r '.country_name // "Unknown"')
            ISP=$(echo $LOCATION_JSON | jq -r '.org // "Unknown"')

            UPDATED_MSG="🚀 Tailscale Node Online
──────────────────────────────
🖥️ Runner       : ${{ steps.runner_info.outputs.runner_hostname }}
🌐 Tailscale IP  : $TAILSCALE_IP
🌍 Public IP     : $PUBLIC_IP
📍 Location      : $CITY, $COUNTRY
🏢 ISP           : $ISP
──────────────────────────────
⏱️ Running since : ${HOURS}:${MINUTES}:${SECONDS}
⏰ Next workflow  : $NEXT_RUN
──────────────────────────────"

            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/editMessageText" \
              --data-urlencode "chat_id=${{ secrets.TG_CHAT_ID }}" \
              --data-urlencode "message_id=$MESSAGE_ID" \
              --data-urlencode "text=$UPDATED_MSG"

            sleep 300
          done

      - name: Cleanup Exit Node
        if: always()
        run: |
          echo "🛑 Cleaning up Tailscale exit node..."
          sudo tailscale down

      - name: Send Telegram Stop Notification
        if: always()
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          HOURS=$(printf "%02d" $((DURATION/3600)))
          MINUTES=$(printf "%02d" $(((DURATION%3600)/60)))
          SECONDS=$(printf "%02d" $((DURATION%60)))

          MSG="🛑 Tailscale Node Stopped
──────────────────────────────
🖥️ Runner       : ${{ steps.runner_info.outputs.runner_hostname }}
🌐 Tailscale IP was: ${{ steps.get_ips.outputs.ts_ip }}
🌍 Public IP was  : ${{ steps.get_ips.outputs.pub_ip }}
📍 Location was   : ${{ env.CITY }}, ${{ env.COUNTRY }}
🏢 ISP           : ${{ env.ISP }}
──────────────────────────────
⏱️ Active Duration: ${HOURS}:${MINUTES}:${SECONDS}
──────────────────────────────"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
            --data-urlencode "chat_id=${{ secrets.TG_CHAT_ID }}" \
            --data-urlencode "text=$MSG"
